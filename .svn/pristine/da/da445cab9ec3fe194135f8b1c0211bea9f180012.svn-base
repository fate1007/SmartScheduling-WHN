package Util;

import java.text.DecimalFormat;

/**
 * Created by Kelvin Liu on 11/07/2016.
 */
public class CoordinateUtil {
    private static final double ee = 0.00669342162296594323;

    /**
     * 百度坐标与火星坐标的转换
     * @param candidate
     * @return converted coordinates
     */
    public static LatLon bd09toGCJ(LatLon candidate) {
        double x_pi = 3.14159265358979323846 * 3000.0 / 180.0;
        double x = candidate.getLon() - 0.0065;
        double y = candidate.getLat() - 0.006;
        double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_pi);
        double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_pi);
        double gg_lng = z * Math.cos(theta);
        double gg_lat = z * Math.sin(theta);
        return new LatLon(gg_lat, gg_lng);
    }

    /**
     * 火星坐标与世界地理通用坐标的转换
     * i.e. Google / AMap to OpenStreetMap
     * @param candidate coordinate to convert
     * @return converted coordinates
     */
    public static LatLon GCJtoWGS84(LatLon candidate) {
        double lng = candidate.getLon();
        double lat = candidate.getLat();
        if (isOutOfChina(candidate)) {
            return candidate;
        } else {
            double dlat = transformLat(lng - 105.0, lat - 35.0);
            double dlng = transformLon(lng - 105.0, lat - 35.0);
            double radlat = lat / 180.0 * Math.PI;
            double magic = Math.sin(radlat);
            magic = 1 - ee * magic * magic;
            double sqrtmagic = Math.sqrt(magic);
            dlat = (dlat * 180.0) / ((GeoPolygon.EARTH_RADIUS * 1000 * (1 - ee)) / (magic * sqrtmagic) * Math.PI);
            dlng = (dlng * 180.0) / (GeoPolygon.EARTH_RADIUS * 1000 / sqrtmagic * Math.cos(radlat) * Math.PI);
            double mglat = lat - dlat;
            double mglng = lng - dlng;
            return new LatLon(mglat, mglng);
        }
    }

    public static LatLon GCJtoBD09(LatLon candidate) {
        double gj_lon = candidate.getLon();
        double gj_lat = candidate.getLat();
        double x_pi = 3.14159265358979324 * 3000.0 / 180.0;

		double z = Math.sqrt(Math.pow(gj_lon,2) + Math.pow(gj_lat, 2)) + 0.00002 * Math.sin(gj_lat * x_pi);
		double theta = Math.atan2(gj_lat, gj_lon) + 0.000003 * Math.cos(gj_lon * x_pi);
		double lon = z * Math.cos(theta) + 0.0065;
		double lat = z * Math.sin(theta) + 0.006;
        return new LatLon(lat, lon);
    }

    public static LatLon WGS84toGCJ(LatLon candidate) {
        double lng = candidate.getLon();
        double lat = candidate.getLat();
        if (isOutOfChina(candidate)) {
            return candidate;
        } else {
            double dlat = transformLat(lng - 105.0, lat - 35.0);
            double dlng = transformLon(lng - 105.0, lat - 35.0);
            double radlat = lat / 180.0 * Math.PI;
            double magic = Math.sin(radlat);
            magic = 1 - ee * magic * magic;
            double sqrtmagic = Math.sqrt(magic);
            dlat = (dlat * 180.0) / ((GeoPolygon.EARTH_RADIUS * 1000 * (1 - ee)) / (magic * sqrtmagic) * Math.PI);
            dlng = (dlng * 180.0) / (GeoPolygon.EARTH_RADIUS * 1000 / sqrtmagic * Math.cos(radlat) * Math.PI);
            double mglat = lat + dlat;
            double mglng = lng + dlng;
            return new LatLon(mglat, mglng);
        }
    }

    /**
     * Baidu Map coordinate to OpenStreet Map coordinates.
     * @param baiduCoord baidu coordinate to convert
     * @return result
     */
    public static LatLon baiduToOpenMap(LatLon baiduCoord) {
        DecimalFormat formatter = new DecimalFormat("#########0.000000");
        LatLon result = GCJtoWGS84(bd09toGCJ(baiduCoord));
        double convertedLat = Double.parseDouble(formatter.format(result.getLat()));
        double convertedLon = Double.parseDouble(formatter.format(result.getLon()));
        return new LatLon(convertedLat, convertedLon);
    }

    public static LatLon openMapToBaidu(LatLon osmCoord) {
        DecimalFormat formatter = new DecimalFormat("#########0.000000");
        LatLon result = GCJtoBD09(WGS84toGCJ(osmCoord));
        double convertedLat = Double.parseDouble(formatter.format(result.getLat()));
        double convertedLon = Double.parseDouble(formatter.format(result.getLon()));
        return new LatLon(convertedLat, convertedLon);
    }

    private static boolean isOutOfChina(LatLon suspiciousPt) {
        return (suspiciousPt.getLon() < 72.004 || suspiciousPt.getLon() > 137.8347) ||
                ((suspiciousPt.getLat() < 0.8293 || suspiciousPt.getLat() > 55.8271));
    }

    private static double transformLat(double lng, double lat) {
        double ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));
        ret += (20.0 * Math.sin(6.0 * lng * Math.PI) + 20.0 * Math.sin(2.0 * lng * Math.PI)) * 2.0 / 3.0;
        ret += (20.0 * Math.sin(lat * Math.PI) + 40.0 * Math.sin(lat / 3.0 * Math.PI)) * 2.0 / 3.0;
        ret += (160.0 * Math.sin(lat / 12.0 * Math.PI) + 320 * Math.sin(lat * Math.PI / 30.0)) * 2.0 / 3.0;
        return ret;
    }

    private static double transformLon(double lng, double lat) {
        double ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));
        ret += (20.0 * Math.sin(6.0 * lng * Math.PI) + 20.0 * Math.sin(2.0 * lng * Math.PI)) * 2.0 / 3.0;
        ret += (20.0 * Math.sin(lng * Math.PI) + 40.0 * Math.sin(lng / 3.0 * Math.PI)) * 2.0 / 3.0;
        ret += (150.0 * Math.sin(lng / 12.0 * Math.PI) + 300.0 * Math.sin(lng / 30.0 * Math.PI)) * 2.0 / 3.0;
        return ret;
    }
}
